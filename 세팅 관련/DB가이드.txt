1. USERLIST

- 사용자 정보 테이블

@생성 (H2 DB 기준)

CREATE TABLE USERLIST (
   userId   INT   NOT NULL AUTO_INCREMENT,
   userEmail VARCHAR(100)   NOT NULL,
   userPw   VARCHAR(100)   NOT NULL,
   userName   VARCHAR(20)   NOT NULL,
   userNickname   VARCHAR(20)   NOT NULL,
   userProfile   VARCHAR(255),
   userRegDate VARCHAR NOT NULL  DEFAULT TO_CHAR(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss'),
   userModDate   VARCHAR,
   userPhone   VARCHAR(30)   NOT NULL,
   userPremium   INTEGER   DEFAULT 0,
   adminAuth   INTEGER   DEFAULT 0,
   userResign   INTEGER   DEFAULT 0,
   PRIMARY KEY (userId)
);

* userRegDate / userModDate 생성, 수정시  
DEFAULT TO_CHAR(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') 포맷 처리

+ 스프링부트에서 VO에 자료형 DATE말고 String쓸것 (깔끔하게 나옴)


2. LEDGER

- 접속중인 사용자의 가계부 리스트 조회

CREATE TABLE LEDGER (
  ledgerId INTEGER NOT NULL AUTO_INCREMENT,
  userId INTEGER NOT NULL,
  ledgerName VARCHAR(100) NOT NULL,
  ledgerRegDate DATETIME NOT NULL DEFAULT TO_CHAR(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss'),
  ledgerModDate DATETIME NULL,
  ledgerMemo VARCHAR(200) NULL
);

ALTER TABLE `LEDGER` ADD CONSTRAINT `PK_LEDGER` PRIMARY KEY (
	`ledgerId`
);

3. SPENDING

CREATE TABLE `SPENDING` (
	`spendingId`	INTEGER	NOT NULL AUTO_INCREMENT,
	`userId`	INTEGER	NOT NULL,
	`spendingTime`	DATETIME	NOT NULL,
	`spendingAmount`	INTEGER	NOT NULL,
	`spendingWhy`	VARCHAR(100)	NULL,
	`spendingCategory1`	VARCHAR(20)	NOT NULL,
	`spendingCategory2`	VARCHAR(20)	NULL,
	`spendingMethod`	VARCHAR(20)	NULL,
	`spendingMemo`	VARCHAR(100)	NULL
);

ALTER TABLE `SPENDING` ADD CONSTRAINT `PK_SPENDING` PRIMARY KEY (
	`spendingId`
);

@@ EXAMPLE

INSERT INTO SPENDING (userId, spendingAmount,spendingCategory1, spendingCategory2, spendingMethod, spendingWhy, spendingMemo, spendingTime)
VALUES (2, 50000, '식비', '커피/음료', '현금', '점심 이후 카페', '메모', '2024-04-12 17:09:20');

4. INCOME

CREATE TABLE `INCOMING` (
	`incomingId`	INTEGER	NOT NULL AUTO_INCREMENT,
	`userId`	INTEGER	NOT NULL,
	`incomingTime`	DATETIME	NOT NULL,
	`incomingAmount`	INTEGER	NOT NULL,
	`incomingWhy`	VARCHAR(100)	NULL,
	`incomingCategory1`	VARCHAR(20)	NOT NULL,
	`incomingCategory2`	VARCHAR(20)	NULL,
	`incomingMethod`	VARCHAR(20)	NULL,
	`incomingMemo`	VARCHAR(100)	NULL
);

ALTER TABLE `INCOMING` ADD CONSTRAINT `PK_INCOMING` PRIMARY KEY (
	`incomingId`
);



@@EXAMPLE

INSERT INTO INCOMING (userId, incomingAmount,incomingCategory1, incomingCategory2, incomingMethod, incomingWhy, incomingMemo, incomingTime)
VALUES (33, 500000, '기타', '복권', '현금', '복권당첨', '메모', '2024-04-16 17:09:20');

5. SPENDING_METHOD

CREATE TABLE `SPENDING_METHOD` (
	`spendingMethodId`	INTEGER	NOT NULL AUTO_INCREMENT,
	`spendingMethod`	VARCHAR(30)	NOT NULL,
	`userId`	INTEGER	NOT NULL
);

ALTER TABLE `SPENDING_METHOD` ADD CONSTRAINT `PK_SPENDING_METHOD` PRIMARY KEY (
	`spendingMethodId`
);


///

INSERT INTO SPENDING_METHOD (spendingMethod, userId) VALUES ('현금', 2);

6.INCOMING_METHOD

CREATE TABLE `INCOMING_METHOD` (
	`incomingMethodId`	INTEGER	NOT NULL AUTO_INCREMENT,
	`incomingMethod`	VARCHAR(30)	NOT NULL,
	`userId`	INTEGER	NOT NULL
);

ALTER TABLE `INCOMING_METHOD` ADD CONSTRAINT `PK_INCOMING_METHOD` PRIMARY KEY (
	`incomingMethodId`
);




///

UPDATE

UPDATE 테이블명 SET 필드명='변경할값' WHERE 필드명=해당값;

INSERT

INSERT INTO 테이블 이름 (열1, 열2, ...) 
VALUE (값1, 값2 , ….)



조인문

        SELECT spendingId, S.userId, (TO_CHAR(SPENDINGTIME,'YYYY-MM-DD HH:MM:SS')) as spendTime , spendingAmount, spendingWhy,
        		spendingCategory1, spendingCategory2, S.spendingMethodId, spendingMemo, spendingMethod
        FROM
        SPENDING S JOIN SPENDING_METHOD M ON S.userId = M.userId WHERE S.userId = 2 AND S.spendingMethodId = M.spendingMethodId;



"yyyy-MM-dd HH:mm:ss"

///////

INSERT INTO TIMETEST (TIME) VALUES ('2024-03-13');

결과 - 2024-03-13 00:00:00 (DATETIME)

1. h2 db - datetime
- mybatis 에서 to_char로 time이름같게해서 json으로 보내기
- 프론트에서 String으로 받아서 정상출력 (가능)

역순으로

1. 프론트에서 input - type "datetime-Local"로 받은 타임정보를 (value = time)
2.moment(time).format("YYYY-MM-DD HH:mm:SS").toString(); 으로 String 변환
3. 프론트로 String으로 보냄
4. db에 삽입 (정상적으로 박아짐)

확인


////////////////


연 / 월 / 일별 토탈 구하기

SELECT
    EXTRACT(YEAR FROM spendingTime) AS years,
    EXTRACT(MONTH FROM spendingTime) AS months,
    EXTRACT(DAY FROM spendingTime) AS days,
    SUM(spendingAmount) AS daystotal
FROM SPENDING
GROUP BY EXTRACT(YEAR FROM spendingTime), EXTRACT(MONTH FROM spendingTime), EXTRACT(DAY FROM spendingTime)
ORDER BY years, months, days;

//////////

일자만 뜯기

SELECT
    spendingId,
    userId,
    spendingTime,
    spendingAmount,
    spendingWhy,
    spendingCategory1,
    spendingCategory2,
    spendingMethod,
    spendingMemo
FROM SPENDING
WHERE
    YEAR(spendingTime) = 2024
AND MONTH(spendingTime) = 4
AND DAY(spendingTime)= 10
    AND userId = 2
ORDER BY spendingTime;

//////////////

카테고리별 월간 지출내역 연간으로 조회

		SELECT EXTRACT(YEAR FROM spendingTime) AS years,
		spendingCategory1,
		SUM(SPENDINGAMOUNT) AS categorySum
		FROM SPENDING
		WHERE userId = 2
		GROUP BY EXTRACT(YEAR FROM spendingTime),
		spendingCategory1
		ORDER BY years;

//


0423

CREATE TABLE board (
    no int not null auto_increment,
    title varchar(100) not null,
    userNickname varchar(100) not null,
    content text,
    reg_date varchar not null default TO_CHAR(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:MM:SS'),
    upd_date varchar,
    views int not null default 0,
    primary key (no)
);


UPDATE [테이블] SET [열] = '변경할값' WHERE [조건]
UPDATE USERLIST SET userPremium = 1 WHERE userId = 2;
UPDATE USERLIST SET userResign = 0 WHERE userId = 34;