# Git 주요 명령어 정리

깃 명령어 모음
(커맨드 >> 커맨드내용)

$ git config --global [user.name](http://user.name/) "이름" >> 사용자 정보 저장
$ git config --global [user.](http://user.name/)email "메일 주소" >> 사용자 정보 저장

$ PWD >> 현재 디렉토리 출력

$ cd >> 디렉토리 이동 (change directory)

$ cd .. >> 현재 경로의 상위 디렉토리로 이동

$ cd ~ >> 현재 사용자의 홈 디렉토리로 이동 (윈도우 기준 c/Users/user(사용자명))

$ ls >> 현재 디렉토리의 파일 리스트 조회

$ ls -l >> 현재 디렉토리 파일 리스트 상세조회 (옵션 추가)

$ ls -a >> 경로안의 파일 나열 (숨김파일 포함)

$ ls -h >> 해석하기 편하게 출력

$ ls -s >> 파일 크기를 정수 방식으로 표현

$ ls -alhs >> 현재 디렉토리 모든 파일 표시, 읽기 쉬운 방식, 정수 형식으로 출력

$ mkdir "디렉토리명" >> 디렉토리 생성

exit >> git 커맨드 창 종료

$ vim "파일명" >> 현재 경로에 파일 생성
- i 입력모드
- Esc ex모드(저장,종료 가능)
- :w >> 저장
- :wq >> 저장 및 종료
- :q! >> 저장하지 않고 편집기 종료
- :wq 파일명 >> 지정한 파일명으로 저장

$ cat file >> 파일의 내용 화면 표시
$ cat file(s) > Newfile >> 파일s를 연결해서 새로운 Newfile 생성
$ cat file1 >> file2 >> file1의 내용을 file2의 내용 끝에 연결

$ git init >> 지역 저장소 생성 및 초기화
- 경로설정 후 보통 깃 생성의 처음 단계

$ git status >> 현재 깃 저장소의 브랜치 상황 , 커밋여부, 커밋 가능한 파일 표시
-Untracked files: >> 스테이징 이력이 없는 파일 (버전 관리가 한번도 없는 파일을 의미)

$ git add "파일명" >> 해당 파일 스테이징 영역으로 전달 (커밋 가능 상태로 전환)
-Untracked 파일이 changes to be committed로 전환

$ git commit -m "메세지" >> 커밋과 동시에 메세지 남기기 (스테이징 선행 필요)

$ git log >> 커밋 이력 조회

HEAD >> 현재 사용자 위치

$ git commit -am "메세지" >> 커밋과 메세지 동시에 수행 (스테이징 생략)
- 단, 한번이라도 커밋한 이력이 있어야함 (Untracked file 불가능)

$ git diff >> 커밋된 깃 저장소와 아직 커밋하지않은 워킹트리에있는 파일 비교

$ git log --stat >> 변경사항과 함께 커밋 로그 출력

$ vim .gitignore >> 버전관리하지 않을 파일리스트 등록 파일 생성

$ rm "파일명" >> 파일(디렉토리) 삭제

$ git add . >> 현재 디렉토리의 모든 파일 스테이징

$ git commit --amend >> 커밋 메시지 수정

$ git restore "파일명" >> 해당 파일의 이전 수정사항 되돌리기 (워킹트리에서)

$ git restore --staged "파일명" >> 되돌리기 (스테이징 된 파일)

$ git reset HEAD^ >> 커밋 취소 (^는 HEAD가 가르키는 브랜치의 최신 커밋)

$ git reset --soft ^HEAD >> staged된 상태로 커밋 제거

$ git reset --mixed ^HEAD >> unstaged된 상태로 작업 디렉토리에 보관

$ git reset --hard "커밋 해시" >> 해당 커밋과 그 사이에 있는 커밋들 제거
- 특정 시점으로 되돌리는 개념

$ git revert "커밋 해시" >> 해당 커밋 취소하지만 로그는 남김

$ echo ""내용"" > "파일명" >> 해당 경로에 파일명이 존재하지 않으면 새로운 파일 생성
- 파일명이 존재한다면 내용 덮어쓰기

$ git branch >> 현재 깃 저장소 branch 리스트 조회

$ git branch "브랜치명" >> 새로운 브랜치 생성

$ git log --oneline >> 커밋 로그 조회 간략하게

$ git switch "브랜치명" >> 브랜치 전환

$ git log --oneline --branches >> 발생시간순서대로 모든 브랜치의 커밋 조회

$ git log --oneline --branches --graph >> 가시적인 분기선 추가 표시

$ git log main.."브랜치명" >> main과 해당 브랜치의 차이점 조회
- 기준은 main 브랜치
- main브랜치가 가지지 않은 커밋을 조회함
- 반대로도 가능함

$ git init "디렉토리명" >> 디렉토리 생성과 동시에 git 저장소 생성

$ git merge "브랜치명" >> 대상 브랜치 메인브랜치와 병합

- 자동화 머지 프로그램으로는 P4Merge, meld, Kdiff3, Araxis Merge 등이 있음

$ git branch -d "브랜치명" >> 브랜치 제거
- 완전 삭제는 아니고, 타임라인에서 감추는 개념

$ touch "파일명";git add "파일명;git commit -m "메세지"
>> 세미콜론을 이용해 한번에 여러가지 커맨드 수행도 가능
>> touch는 파일 생성 명령어

$ git cherry-pick "커밋 해시" >> main과 다른 브랜치의 '최신 커밋'이 아닌 '과거 커밋'과 merge